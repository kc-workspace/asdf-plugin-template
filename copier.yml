---
_subdirectory: templates

_min_copier_version: "8.1.0"

_skip_if_exists:
  - README.plugin.md
  - bin
  - "!bin/README.md"
  - lib/utils.sh
  - lib/commands/*.bash
  - "!lib/commands/command-test.bash"
  - "!lib/bin"
  - .github/linters/cspell-custom.dict.txt

_tasks:
  - "git init"
  - "git remote remove origin || exit 0"
  - "git remote add origin {{ plugin_repo }} || exit 0"

_envops:
  comment_end_string: "=}"
  comment_start_string: "{="

app_name:
  type: str
  help: "[APP] What is your application name?"
  placeholder: xxxx
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_app_name %}{{ v_app_name(app_name) }}"

app_desc:
  type: str
  help: "[APP] What is your application description?"
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_desc %}{{ v_desc(app_desc) }}"

app_website:
  type: str
  help: "[APP] What is your application main website?"
  placeholder: https://example.com
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(app_website) }}"

app_repo:
  type: str
  help: "[APP] Where is your application repo?"
  placeholder: https://github.com/octocat/Hello-World
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(app_repo, required=false) }}"

app_type:
  type: str
  help: "[APP] What is your application type?"
  default: standalone
  choices:
    - standalone
    - python

python_name:
  type: str
  help: "[PYN] What is your python package name?"
  default: |
    {%- if archive_enabled -%}
      {{ app_name }}
    {%- endif -%}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(python_name) }}"
  when: "{{ app_type == 'python' }}"

download_url:
  type: str
  help: "[DLD] Where is your download link (variables: {version}, {major_version}, {minor_version}, {patch_version}, {arch}, {os}, {ext})?"
  placeholder: https://example.com/{version}/{arch}/{os}/download
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(download_url) }}"
  when: "{{ app_type == 'standalone' }}"

source_enabled:
  type: bool
  help: "[SUR] Is your application provided build from source?"
  default: false

source_type:
  type: str
  help: "[SUR] What is your application source code type?"
  default: |
    {%- if source_enabled -%}
      git
    {%- endif -%}
  choices:
    - git
    - archive
  when: "{{ source_enabled }}"

source_url:
  type: str
  help: "[SUR] Where is your application source link (variables: {version}, {major_version}, {minor_version}, {patch_version}, {arch}, {os}, {ext})?"
  placeholder: |
    {%- if source_enabled and source_type == 'git' -%}
      https://github.com/org/repo.git
    {%- elif source_enabled and source_type == 'archive' -%}
      https://example.com/repo/{version}.tar.gz
    {%- endif -%}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(source_url) }}"
  when: "{{ source_enabled }}"

archive_enabled:
  type: bool
  help: "[ARC] Is your download result contains archived file?"
  default: |
    {%- if source_type == 'archive' -%}
      true
    {%- else -%}
      false
    {%- endif -%}
  when: "{{ app_type == 'standalone' or (app_type == 'python' and source_type == 'archive') }}"

archive_regex:
  type: str
  help: "[ARC] When the downloaded result will perform extracting?"
  default: |
    {%- if archive_enabled -%}
      (\\.tar\\.gz|\\.tgz|\\.zip)$
    {%- endif -%}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(archive_regex) }}"
  when: "{{ archive_enabled }}"

archive_conf_strip:
  type: int
  help: "[ARC] How many times we should strip directory when extract result (not support by unzip)?"
  placeholder: 0
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_uint %}{{ v_uint(archive_conf_strip, required=false) }}"
  when: "{{ archive_enabled }}"

archive_conf_path:
  type: str
  help: "[ARC] Where is your application located inside extracted directory?"
  placeholder: dist/path
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_rel_path %}{{ v_rel_path(archive_conf_path, required=false) }}"
  when: "{{ archive_enabled }}"

package_enabled:
  type: bool
  help: "[PKG] Is your download result contains packaged file?"
  default: false
  when: "{{ app_type == 'standalone' }}"

package_regex:
  type: str
  help: "[PKG] When the downloaded result will perform extracting?"
  default: |
    {%- if package_enabled -%}
      (\\.pkg)$
    {%- endif -%}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(package_regex) }}"
  when: "{{ package_enabled }}"

package_conf_path:
  type: str
  help: "[PKG] Where is your application located inside unpacked directory?"
  placeholder: dist/path
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_rel_path %}{{ v_rel_path(package_conf_path, required=false) }}"
  when: "{{ package_enabled }}"

checksum_enabled:
  type: bool
  help: "[CKS] Is your application provided checksum file?"
  default: false
  when: "{{ app_type == 'standalone' or source_enabled }}"

checksum_url:
  type: str
  help: "[CKS] Where is your checksum link (variables: {version}, {major_version}, {minor_version}, {patch_version}, {arch}, {os}, {ext})?"
  placeholder: https://example.com/{version}/{arch}/{os}/checksum.shasum
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(checksum_url) }}"
  when: "{{ checksum_enabled }}"

checksum_conf_algorithm:
  type: int
  help: "[CKS] What is your shasum algorithm?"
  default: 256
  choices:
    sha1sum: 1
    sha224sum: 224
    sha256sum: 256
    sha384sum: 384
    sha512sum: 512
  when: "{{ checksum_enabled }}"

gpg_enabled:
  type: bool
  help: "[GPG] Is your application provided gpg signature?"
  default: false
  when: "{{ app_type == 'standalone' or source_enabled }}"

gpg_public_key_type:
  type: str
  help: "[GPG] How can we get public key from?"
  default: link
  choices:
    - link
    - raw
    - email
    - keyid
    - fingerprint
  when: "{{ gpg_enabled }}"

gpg_public_key_link:
  type: str
  help: "[GPG] Where is your GPG public key?"
  placeholder: https://keys.openpgp.org/vks/v1/by-fingerprint/ABCD0123EFGH4567IJKL8910MNOP1112QRST1314
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(gpg_public_key_link) }}"
  when: "{{ gpg_enabled and gpg_public_key_type == 'link' }}"

gpg_public_key_raw:
  type: str
  help: "[GPG] What is your GPG public key?"
  multiline: true
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_pubkey %}{{ v_pubkey(gpg_public_key_raw) }}"
  when: "{{ gpg_enabled and gpg_public_key_type == 'raw' }}"

gpg_public_key_email:
  type: str
  help: "[GPG] What is your GPG email (leave empty if not applied)?"
  placeholder: codesign@example.com
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_email %}{{ v_email(gpg_public_key_email, gpg_public_key_type == 'email') }}"
  when: "{{ gpg_enabled }}"

gpg_public_key_keyid:
  type: str
  help: "[GPG] What is your GPG keyid (leave empty if not applied)?"
  placeholder: ABCD0123ABCD4567
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_keyid %}{{ v_keyid(gpg_public_key_keyid, gpg_public_key_type == 'keyid') }}"
  when: "{{ gpg_enabled }}"

gpg_public_key_fingerprint:
  type: str
  help: "[GPG] What is your GPG fingerprint (leave empty if not applied)?"
  placeholder: ABCD0123ABCD4567ABCD8910ABCD1112ABCD1314
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_fingerprint %}{{ v_fingerprint(gpg_public_key_fingerprint, gpg_public_key_type == 'fingerprint') }}"
  when: "{{ gpg_enabled }}"

gpg_sig_url:
  type: str
  help: "[GPG] Where is your gpg signature link (variables: {version}, {major_version}, {minor_version}, {patch_version}, {arch}, {os}, {ext})?"
  placeholder: https://example.com/{version}.sig
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_https %}{{ v_https(gpg_sig_url, required=false) }}"
  when: "{{ gpg_enabled }}"

install_map_enabled:
  type: bool
  help: "[IST] Would you like to mapping scripts on install directory?"
  default: true

install_map_yaml:
  type: yaml
  help: "[IST] What is your scripts mapping (variables: {version}, {major_version}, {minor_version}, {patch_version}, {arch}, {os}, {ext})?"
  multiline: true
  default: |
    {%- if app_type == 'python' -%}
      venv/bin/{{ app_name }}: bin/{{ app_name }}
    {%- elif app_type == 'standalone' -%}
      {{ app_name }}: bin/{{ app_name }}
    {%- endif -%}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_yaml_str %}{{ v_yaml_str(install_map_yaml) }}"
  when: "{{ install_map_enabled }}"

install_map_method:
  type: str
  help: "[IST] How to mapping scripts?"
  default: |
    {%- if app_type == 'standalone' -%}
      move
    {%- elif app_type == 'python' -%}
      link
    {%- endif -%}
  choices:
    - move
    - link
    - copy
  when: "{{ install_map_enabled }}"

version_prefix:
  type: str
  help: "[VER] What is your application version prefix?"
  default: v
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(version_prefix, required=false) }}"

version_file_enabled:
  type: bool
  help: "[VER] Do your application has own version file?"
  default: false

version_file_names:
  type: str
  help: "[VER] What is your version filename list (separated by space)?"
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(version_file_names, required=false) }}"
  when: "{{ version_file_enabled }}"

addon_yaml:
  type: yaml
  help: "[CST] What is your application addon requirement?"
  multiline: true
  default: |
    archive: {{ archive_enabled }}
    checksum: {{ checksum_enabled }}
    fetch: true
    download: {% if app_type == 'standalone' %}true{% else %}false{% endif %}
    git: {{ source_enabled }}
    github: {% from pathjoin('macros', 'github.jinja') import is_gh %}{{ is_gh(app_repo) }}
    gpg: {{ gpg_enabled }}
    help: true
    install: true
    system: {% if app_type == 'standalone' %}true{% else %}false{% endif %}
    tags: true
    version: false
    python: {% if app_type == 'python' %}true{% else %}false{% endif %}
    package: {{ package_enabled }}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_yaml_bool %}{{ v_yaml_bool(addon_yaml) }}"

sys_os_enabled:
  type: bool
  help: "[SYS] If you would like to custom OS name?"
  default: false
  when: "{{ addon_yaml.system }}"

sys_os_yaml:
  type: yaml
  help: "[SYS] What is OS mapper on yaml?"
  multiline: true
  default: |
    linux: Linux
    darwin: MacOS
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_yaml_str %}{{ v_yaml_str(sys_os_yaml) }}"
  when: "{{ sys_os_enabled }}"

sys_arch_enabled:
  type: bool
  help: "[SYS] If you would like to custom ARCH name?"
  default: |
    {%- if app_type == 'standalone' -%}
      true
    {%- else -%}
      false
    {%- endif -%}
  when: "{{ addon_yaml.system }}"

sys_arch_yaml:
  type: yaml
  help: "[SYS] What is Arch mapper on yaml?"
  multiline: true
  default: |
    x86_64: amd64
    x86: '386'
    i686: '386'
    i386: '386'
    powerpc64le: ppc64le
    ppc64le: ppc64le
    armv5*: armv5
    armv6*: armv6
    armv7*: armv7
    aarch64*: arm64
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_yaml_str %}{{ v_yaml_str(sys_arch_yaml) }}"
  when: "{{ sys_arch_enabled }}"

sys_ext_enabled:
  type: bool
  help: "[SYS] If you would like to custom download extension?"
  default: false
  when: "{{ addon_yaml.system }}"

sys_ext_default:
  type: str
  help: "[SYS] What is default download extension?"
  placeholder: zip
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(sys_ext_default) }}"
  when: "{{ sys_ext_enabled }}"

sys_ext_yaml:
  type: yaml
  help: "[SYS] What is download extension mapper on yaml?"
  multiline: true
  default: |
    'darwin-*': pkg
    'linux-*': zip
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_yaml_str %}{{ v_yaml_str(sys_ext_yaml) }}"
  when: "{{ sys_ext_enabled }}"

custom_non_stable_version:
  type: str
  help: "[CST] What is your application non-stable version look like?"
  default: "(-src|-dev|-latest|-stm|[-\\.]rc|-alpha|-beta|[-\\.]pre|-next|snapshot|master)"
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(custom_non_stable_version, required=false) }}"

custom_bin_paths:
  type: str
  help: "[CST] What is your application bin scripts (separated by space)?"
  default: bin
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(custom_bin_paths) }}"

custom_require_commands:
  type: str
  help: "[CST] What is your application command requirement (separated by space)?"
  default: "{% if app_type == 'python' %}python{% endif %}"
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(custom_require_commands, required=false) }}"

test_cmd_args:
  type: str
  help: "[TST] What is command arguments for testing?"
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(test_cmd_args, required=false) }}"

plugin_org:
  type: str
  help: "[PGI] What is your plugin organization on GitHub?"
  default: kc-workspace
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(plugin_org) }}"

plugin_name:
  type: str
  help: "[PGI] What is your plugin name on GitHub?"
  default: asdf-{{ app_name }}
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_pg_name %}{{ v_pg_name(plugin_name) }}"

plugin_author:
  type: str
  help: "[PGI] What is your name (prefer fullname)?"
  default: Kamontat Chantrachirathumrong
  validator: "{% from pathjoin('macros', 'validators.jinja') import v_str %}{{ v_str(plugin_author) }}"

plugin_repo:
  type: str
  help: "[PGI] What is your plugin repo type?"
  default: "{% from pathjoin('macros', 'github.jinja') import https %}{{ https(plugin_org, plugin_name) }}"
  choices:
    https: "{% from pathjoin('macros', 'github.jinja') import https %}{{ https(plugin_org, plugin_name) }}"
    ssh: "{% from pathjoin('macros', 'github.jinja') import ssh %}{{ ssh(plugin_org, plugin_name) }}"
