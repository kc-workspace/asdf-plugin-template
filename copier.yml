---
_subdirectory: templates

_skip_if_exists:
  - README.plugin.md
  - bin
  - "!bin/README.md"
  - lib/utils.sh
  - lib/commands/*.bash
  - "!lib/commands/command-test.bash"
  - "!lib/bin"
  - .github/linters/cspell-custom.dict.txt

# _tasks:
#   - "git init"
#   - "git remote remove origin || exit 0"
#   - "git remote add origin {{ plugin_repo }} || exit 0"
#   - "git add --all || exit 0"
#   - "git commit -m 'feat(core): applied template' || exit 0"
#   - "git push origin main || exit 0"

app_name:
  type: str
  help: "[APP] What is your application name?"
  placeholder: xxxx
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_name %}{{ valid_name(app_name) }}"

app_desc:
  type: str
  help: "[APP] What is your application description?"
  multiline: true
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_desc %}{{ valid_desc(app_desc) }}"

app_website:
  type: str
  help: "[APP] What is your application main website?"
  placeholder: https://example.com
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_link %}{{ valid_link(app_website) }}"

app_repo:
  type: str
  help: "[APP] Where is your application repo?"
  placeholder: https://github.com/octocat/Hello-World
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_link %}{{ valid_link(app_repo) }}"

download_url:
  type: str
  help: "[DLD] Where is your download link (support '{arch}', '{os}', '{version}')?"
  placeholder: https://example.com/{version}/{arch}/{os}/download
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_link %}{{ valid_link(download_url) }}"

source_enabled:
  type: bool
  help: "[SUR] Is your application provided build from source?"
  default: false

source_type:
  type: str
  help: "[SUR] What is your application source code type?"
  default: git
  choices:
    - git
    - archive

source_url:
  type: str
  help: "[SUR] Where is your application source link (support '{arch}', '{os}', '{version}')?"
  placeholder: |
    {%- if source_type == 'git' -%}
      https://github.com/org/repo.git
    {%- elif source_type == 'archive' -%}
      https://example.com/repo/{version}.tar.gz
    {%- endif -%}
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_link %}{{ valid_link(source_url) }}"
  when: "{{ source_enabled }}"

archive_enabled:
  type: bool
  help: "[ARC] Is your download result contains archived file?"
  default: false

archive_regex:
  type: str
  help: "[ARC] When the downloaded result will perform extracting?"
  default: "(\\.tar\\.gz|\\.tgz|\\.zip)$"
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_require_str %}{{ valid_require_str(archive_regex) }}"
  when: "{{ archive_enabled }}"

archive_conf_strip:
  type: int
  help: "[ARC] How many times we should strip directory when extract result (not support by unzip)?"
  default: 0
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_uint %}{{ valid_uint(archive_conf_strip) }}"
  when: "{{ archive_enabled }}"

archive_conf_path:
  type: str
  help: "[ARC] Where is your application located inside extracted directory?"
  placeholder: dist/path
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_path %}{{ valid_path(archive_conf_path) }}"
  when: "{{ archive_enabled }}"

package_enabled:
  type: bool
  help: "[PKG] Is your download result contains packaged file?"
  default: false

package_regex:
  type: str
  help: "[PKG] When the downloaded result will perform extracting?"
  default: "(\\.pkg)$"
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_require_str %}{{ valid_require_str(package_regex) }}"
  when: "{{ package_enabled }}"

package_conf_path:
  type: str
  help: "[PKG] Where is your application located inside unpacked directory?"
  placeholder: dist/path
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_path %}{{ valid_path(package_conf_path) }}"
  when: "{{ package_enabled }}"

checksum_enabled:
  type: bool
  help: "[CKS] Is your application provided checksum file?"
  default: false

checksum_url:
  type: str
  help: "[CKS] Where is your checksum link (support '{arch}', '{os}', '{version}')?"
  placeholder: https://example.com/{version}/{arch}/{os}/checksum.shasum
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_link %}{{ valid_link(checksum_url) }}"
  when: "{{ checksum_enabled }}"

checksum_conf_algorithm:
  type: int
  help: "[CKS] What is your shasum algorithm?"
  default: 256
  choices:
    sha1sum: 1
    sha224sum: 224
    sha256sum: 256
    sha384sum: 384
    sha512sum: 512
  when: "{{ checksum_enabled }}"

gpg_enabled:
  type: bool
  help: "[GPG] Is your application provided gpg signature?"
  default: false

gpg_public_key:
  type: str
  help: "[GPG] What is your GPG public key"
  multiline: true
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_pub %}{{ valid_pub(gpg_public_key) }}"
  when: "{{ gpg_enabled }}"

gpg_fingerprint:
  type: str
  help: "[GPG] What is your GPG fingerprint"
  placeholder: ABCD0123EFGH4567IJKL8910MNOP1112QRST1314
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_fingerprint %}{{ valid_fingerprint(gpg_fingerprint) }}"
  when: "{{ gpg_enabled }}"

gpg_sig_url:
  type: str
  help: "[GPG] Where is your gpg signature link (support '{arch}', '{os}', '{version}')?"
  placeholder: https://example.com/{version}.sig
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_link %}{{ valid_link(gpg_sig_url) }}"
  when: "{{ gpg_enabled }}"

install_map_enabled:
  type: bool
  help: "[IST] Would you like to mapping scripts on install directory?"
  default: true

install_map_yaml:
  type: yaml
  help: "[IST] What is your scripts mapping (support '{arch}', '{os}', '{version}')?"
  multiline: true
  default: |
    {{ app_name }}: bin/{{ app_name }}
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_yaml_only_str %}{{ valid_yaml_only_str(install_map_yaml) }}"
  when: "{{ install_map_enabled }}"

install_map_method:
  type: str
  help: "[IST] How to mapping scripts?"
  default: move
  choices:
    - move
    - link
    - copy
  when: "{{ install_map_enabled }}"

version_prefix:
  type: str
  help: "[VER] What is your application version prefix?"
  default: v

version_file_enabled:
  type: bool
  help: "[VER] Do your application has own version file?"
  default: false

version_file_names:
  type: str
  help: "[VER] What is your version filename list (separated by space)?"
  when: "{{ version_file_enabled }}"

custom_os_enabled:
  type: bool
  help: "[CST] If you would like to custom OS name?"
  default: false

custom_os_yaml:
  type: yaml
  help: "[CST] What is OS mapper on yaml?"
  multiline: true
  default: |
    linux: Linux
    darwin: MacOS
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_yaml_only_str %}{{ valid_yaml_only_str(custom_os_yaml) }}"
  when: "{{ custom_os_enabled }}"

custom_arch_enabled:
  type: bool
  help: "[CST] If you would like to custom ARCH name?"
  default: true

custom_arch_yaml:
  type: yaml
  help: "[CST] What is Arch mapper on yaml?"
  multiline: true
  default: |
    x86_64: amd64
    x86: '386'
    i686: '386'
    i386: '386'
    powerpc64le: ppc64le
    ppc64le: ppc64le
    armv5*: armv5
    armv6*: armv6
    armv7*: armv7
    aarch64*: arm64
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_yaml_only_str %}{{ valid_yaml_only_str(custom_arch_yaml) }}"
  when: "{{ custom_arch_enabled }}"

custom_non_stable_version:
  type: str
  help: "[CST] What is your application non-stable version look like?"
  default: "(-src|-dev|-latest|-stm|[-\\.]rc|-alpha|-beta|[-\\.]pre|-next|snapshot|master)"

custom_bin_paths:
  type: str
  help: "[CST] What is your application bin scripts (separated by space)?"
  default: bin

custom_require_commands:
  type: str
  help: "[CST] What is your application command requirement (separated by space)?"

test_cmd_args:
  type: str
  help: "[TST] What is command arguments for testing?"

plugin_org:
  type: str
  help: "[PGI] What is your plugin organization on GitHub?"
  default: kc-workspace
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_require_str %}{{ valid_require_str(plugin_org) }}"

plugin_name:
  type: str
  help: "[PGI] What is your plugin name on GitHub?"
  default: asdf-{{ app_name }}
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_plugin_name %}{{ valid_plugin_name(plugin_name) }}"

plugin_author:
  type: str
  help: "[PGI] What is your name (prefer fullname)?"
  default: Kamontat Chantrachirathumrong
  validator: "{% from pathjoin('macros', 'validators.jinja') import valid_require_str %}{{ valid_require_str(plugin_author) }}"

plugin_repo:
  type: str
  help: "[PGI] What is your plugin repo type?"
  default: "{% from pathjoin('macros', 'github.jinja') import https %}{{ https(plugin_org, plugin_name) }}"
  choices:
    https: "{% from pathjoin('macros', 'github.jinja') import https %}{{ https(plugin_org, plugin_name) }}"
    ssh: "{% from pathjoin('macros', 'github.jinja') import ssh %}{{ ssh(plugin_org, plugin_name) }}"
